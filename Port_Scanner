import socket 
import re
import subprocess
ip_add_pattern = re.compile("^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$")
# this matches ipv4 address's.
# ^, breaks down the position at the start of the string. 
# (?: ...): 
#[0-9]{1,3}: Matches a sequence of 1 to 3 digits (0-9). This corresponds to each octet in the IP address.
#\.: Escapes the dot character, matching a literal period. 
# Since the dot is a special character in regular expressions,
#  it needs to be escaped to match an actual dot.
port_range_pattern = re.compile("([0-9]+)-([0-9]+)")
# [0-9]+: Matches one or more digits (0-9). 
# The + quantifier ensures that at least one digit must be present.
port_min = 0
port_max = 65535

# This script does not discriminate the difference between filtered and closed ports.


# user interface 
print(r"""    
/ _\ __ _ _ __   __| | / _\ __ _ _ __   __| | / _\ __ _ _ __   __| |
\ \ / _` | '_ \ / _` | \ \ / _` | '_ \ / _` | \ \ / _` | '_ \ / _` |
_\ | (_| | | | | (_| | _\ | (_| | | | | (_| | _\ | (_| | | | | (_| |
\__/\__,_|_| |_|\__,_| \__/\__,_|_| |_|\__,_| \__/\__,_|_| |_|\__,_|""")
print("\n**********************************************************************************")
print("\nThis is a basic port scanner. This WILL NOT tell you if a port is filtered or not.")
print("\n Scanning all ports is NOT recommeneded")
print("Made By SAND \ninsperation taken from DAVID BOMBAL PORT SCANNER")
print("**********************************************************************************")
open_ports = []
#initializes an empty list named open_ports
while True:
    ip_entered = input("\n Please Enter the IP address that you want to scan!")
    if ip_add_pattern.search(ip_entered):
        print(f"{ip_entered} is a VALID ip address")
    break
while True:
    print("Enter the range of ports you want to scan in fromat: <int>-<int> (e.g 60-120)")
    port_range = input("enter port range: ")
    port_range_valid = port_range_pattern.search(port_range.replace(" ",""))
    #This line removes any spaces from the port_range string.
    if port_range_valid:
        port_min = int(port_range_valid.group(1))
        port_max = int(port_range_valid.group(2))
    break
for port in range(port_min, port_max + 1):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        #This line creates a new socket object s using IPv4 address family (AF_INET) 
        # and TCP socket type (SOCK_STREAM). This is suitable for establishing a TCP connection.
            s.settimeout(0.5)
            #Sets a timeout of 0.5 seconds for the socket operations.
            #If the connection attempt exceeds this timeout, a socket.timeout exception will be raise
            s.connect((ip_entered, port))
            open_ports.append(port)
    except:
        pass 

for port in open_ports:
    # We use an f string to easily format the string with variables so we don't have to do concatenation.
    print(f"Port {port} is open on {ip_entered}.")
